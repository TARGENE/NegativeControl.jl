
permuted_name(name) = Symbol(name, :_permuted)

function permuted_estimand!(permutation_variables::Set, Ψ::ComposedEstimand)
    newargs = Tuple(permuted_estimand!(copy(permutation_variables), arg) for arg in Ψ.args)
    return ComposedEstimand(Ψ.f, newargs)
end

function permuted_estimand!(permutation_variables::Set, Ψ::T) where T
    outcome = if Ψ.outcome ∈ permutation_variables
        delete!(permutation_variables, Ψ.outcome)
        permuted_name(Ψ.outcome)
    else
        Ψ.outcome
    end

    permuted_treatments = Tuple(tn ∈ permutation_variables ? permuted_name(tn) : tn for tn in keys(Ψ.treatment_values))

    return T(
        outcome = outcome,
        treatment_values = NamedTuple{permuted_treatments}(values(Ψ.treatment_values)),
        treatment_confounders = NamedTuple{permuted_treatments}(values(Ψ.treatment_confounders)),
        outcome_extra_covariates = Ψ.outcome_extra_covariates
    )
end

make_permuted_col!(data, col; rng=StableRNG(123)) = 
    data[!, permuted_name(col)] = shuffle(rng, data[!, col])

"""
Rewrite the TMLE source datafile with additional permuted treatment columns
"""
function write_negative_control_dataset(outfile, datafilepath, permuted_variables; rng=StableRNG(123))
    data = instantiate_dataset(datafilepath)
    for col in permuted_variables
        make_permuted_col!(data, col; rng=rng)
    end
    Arrow.write(outfile, data)
end


"""
New parameters are generated by permuting treatment and target columns
at each order <= interaction order.
"""
function make_permutation_parameters(estimands; optimize=true, orders=(1,))
    parameters = []
    all_permuted_variables = Set{Symbol}([])
    for Ψ ∈ estimands
        treatments = treatment_variables(Ψ)
        outcomes = outcome_variables(Ψ)
        variables = vcat(treatments, outcomes)
        for order in orders
            for permutation_variables in combinations(variables, order)
                permutation_variables = Set(permutation_variables)
                union!(all_permuted_variables, permutation_variables)
                push!(parameters, permuted_estimand!(permutation_variables, Ψ))
            end
        end
    end
    if optimize
        parameters = groups_ordering(parameters, brute_force=false, do_shuffle=false)
    end
    return parameters, all_permuted_variables
end

function generate_permutation_parameters_and_dataset(parsed_args)
    # Parsing Arguments
    datafile = parsed_args["dataset"]
    resultsfile = parsed_args["results"]
    outdir = parsed_args["outdir"]
    pval_threshold = parsed_args["pval-threshold"]    
    verbosity = parsed_args["verbosity"]
    orders = parse.(Int, split(parsed_args["orders"], ","))
    limit = parsed_args["limit"]
    rng = StableRNG(parsed_args["rng"])
    chunksize = parsed_args["chunksize"]

    # Generating Permutation Parameters
    verbosity > 0 && @info string("Retrieving significant parameters.")
    results = read_significant_results(resultsfile, threshold=pval_threshold)
    verbosity > 0 && @info string(size(results, 1), " parameters satisfying the threshold.")
    verbosity > 0 && @info "Generating permutation parameters."
    parameters, permuted_variables = make_permutation_parameters(results; optimize=true, orders=orders)
    if limit !== nothing
        parameters = parameters[1:limit]
    end
    verbosity > 0 && @info string(size(parameters, 1), " parameters will be estimated.")
    write_parameter_files(outdir, parameters, chunksize)
    
    # Building Permutation Dataset
    verbosity > 0 && @info "Building permutation dataset"
    write_negative_control_dataset(
        joinpath(outdir, "permutation_dataset.arrow"), 
        datafile, 
        permuted_variables; 
        rng=rng
    )
    verbosity > 0 && @info "Done."
    return 0
end
